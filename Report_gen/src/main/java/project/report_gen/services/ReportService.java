package project.report_gen.services;

import org.docx4j.XmlUtils;
import org.docx4j.jaxb.Context;
import org.docx4j.model.datastorage.migration.VariablePrepare;
import org.docx4j.openpackaging.exceptions.Docx4JException;
import org.docx4j.openpackaging.exceptions.InvalidFormatException;
import org.docx4j.openpackaging.packages.WordprocessingMLPackage;
import org.docx4j.openpackaging.parts.WordprocessingML.DocumentSettingsPart;
import org.docx4j.openpackaging.parts.WordprocessingML.MainDocumentPart;
import org.docx4j.wml.CTCompat;
import org.springframework.stereotype.Service;
import project.report_gen.models.Report;

import java.io.*;
import java.nio.file.Files;
import java.nio.file.Paths;

@Service
public class ReportService {

    //TODO
    // add image to report
    // add table to report

    public void getMainDocumentPart(String docx) throws Exception {
        WordprocessingMLPackage template;
        try {
            template = WordprocessingMLPackage.load(Files.newInputStream(Paths.get(docx)));
        } catch (Docx4JException | IOException e) {
            throw new RuntimeException(e);
        }

        MainDocumentPart documentPart = template.getMainDocumentPart();

        // Remove gumpf so it is easier to read
        // Pretty print the main document part
        VariablePrepare.prepare(template);
        System.out.println(
                XmlUtils.marshaltoString(documentPart.getJaxbElement(), true, true));
    }

    public void createText(Report report, String fileName) throws Docx4JException, FileNotFoundException {
        Report.builder().documentType(report.getDocumentType()).product(report.getProduct()).productionCell(report.getProductionCell()).build();
        WordprocessingMLPackage wordprocessingMLPackage = WordprocessingMLPackage.createPackage();

        // set title as document property
        wordprocessingMLPackage.setTitle("\n" + "Title for " + report.getDocumentType() + " for product " + report.getProduct() + " in production Cell " + report.getProductionCell());

        // create new paragraph with text from report and add to main document part
        MainDocumentPart mainDocumentPart = wordprocessingMLPackage.getMainDocumentPart();
        mainDocumentPart.addParagraphOfText(wordprocessingMLPackage.getTitle());
        mainDocumentPart.addParagraphOfText("This is an autogenerated " + report.getDocumentType() + " completed by Report Application");
        mainDocumentPart.addParagraphOfText(" This report is for " + report.getProduct() + " in production cell " + report.getProductionCell());

        // set compatibility and save file
        setCompat(mainDocumentPart);
        saveFile(wordprocessingMLPackage, fileName);

    }

    // save file
    public void saveFile(WordprocessingMLPackage wordprocessingMLPackage, String fileName) throws FileNotFoundException, Docx4JException {
        wordprocessingMLPackage.save(new FileOutputStream(new File("C:/Users/User/OneDrive/Documents/CodingNomads/projects/Capstone_Project/report_gen/src/main/java/project/report_gen/" + fileName + ".docx")));
    }

    // set compatibility settings for MS office 2016
    public void setCompat(MainDocumentPart mainDocumentPart) throws Docx4JException {
        DocumentSettingsPart dsp = mainDocumentPart.getDocumentSettingsPart(true);
        CTCompat compat = Context.getWmlObjectFactory().createCTCompat();
        dsp.getContents().setCompat(compat);
        compat.setCompatSetting("compatibilityMode", "http://schemas.microsoft.com/office/word", "15");
    }
}